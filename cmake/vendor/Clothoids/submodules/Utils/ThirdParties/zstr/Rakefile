require "rake"
require "fileutils"

require_relative "../../cmake_utils/Rakefile_common.rb"

desc "install ZSTR"
task :install_common do
  puts "Copy ZSTR source".yellow
  if not Dir.exist?("zstr-master") then
    extract_zip("zstr-master.zip");
  end
  FileUtils.rm_f    '../../src/Utils/zstr'
  FileUtils.mkdir_p '../../src/Utils/zstr'
  # copy file
  [ "zstr_make_unique_polyfill.h" ].each do |fname|
    FileUtils.cp 'zstr-master/src/'+fname, '../../src/Utils/zstr/'+fname
  end
  # filter file
  wb = "// Workaround for UTILS (begin)\n"
  we = "\n// Workaround for UTILS (end)"
  File.open('../../src/Utils/zstr/zstr.hpp', 'w') do |out|
    File.open('zstr-master/src/zstr.hpp', 'r').each do |line|
      line.gsub!(
        '#include <strict_fstream.hpp>',
        wb+'#include "strict_fstream.hpp"'+we
      );
      line.gsub!(
        '#include <zstr_make_unique_polyfill.h>',
        wb+'#include "zstr_make_unique_polyfill.h"'+we
      );
      line.gsub!(
        '#include <zlib.h>',
        wb+
        '#ifdef UTILS_OS_WINDOWS'+"\n"+
        '  #include "zlib.h"'+"\n"+
        '#else'+"\n"+
        '  #include <zlib.h>'+"\n"+
        '#endif'+we
      );

      line.gsub!('const char * what()','char const * what() override');
      line.gsub!('virtual ~istream()','~istream() override');
      line.gsub!('virtual ~ostream()','~ostream() override');
      line.gsub!('virtual ~istreambuf()','~istreambuf() override');
      line.gsub!('virtual ~ostreambuf()','~ostreambuf() override');
      line.gsub!('virtual ~ifstream()','~ifstream() override');
      line.gsub!('virtual ~ofstream()','~ofstream() override');
      line.gsub!('virtual ~ifstreambuf()','~ifstreambuf() override');
      line.gsub!('virtual ~ofstreambuf()','~ofstreambuf() override');
      line.gsub!('virtual ~basic_ostream()','~basic_ostream() override');
      line.gsub!('virtual ~basic_istream()','~basic_istream() override');
      line.gsub!('const char * what() const noexcept { return _msg.c_str(); }',
                 'const char * what() const noexcept override { return _msg.c_str(); }');
      out.puts line
    end
  end
  File.open('../../src/Utils/zstr/strict_fstream.hpp', 'w') do |out|
    File.open('zstr-master/src/strict_fstream.hpp', 'r').each do |line|
      line.gsub!('const char * what() const noexcept { return _msg.c_str(); }',
                 'const char * what() const noexcept override { return _msg.c_str(); }');
      out.puts line
    end
  end
end

task :install_osx   => :install_common do end
task :install_linux => :install_common do end
task :install_mingw => :install_common do end
task :install_win   => :install_common do end

task :clean       do end
task :clean_osx   do end
task :clean_linux do end
task :clean_mingw do end
task :clean_win   do end
